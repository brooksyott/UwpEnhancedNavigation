#pragma checksum "C:\Repos\Personal Repo\UwpEnhancedNavigation\UwpEnhancedNavigationDemo\UwpEnhancedNavigation\Views\EnhancedNavigationShell.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "9C6939FDC009FCFD05065779C789D232"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UwpEnhancedNavigation
{
    partial class EnhancedNavigationShell : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Panel_Background(global::Windows.UI.Xaml.Controls.Panel obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_Background(global::Windows.UI.Xaml.Controls.Control obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_Foreground(global::Windows.UI.Xaml.Controls.Control obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Shapes_Shape_Fill(global::Windows.UI.Xaml.Shapes.Shape obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Fill = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_SplitView_DisplayMode(global::Windows.UI.Xaml.Controls.SplitView obj, global::Windows.UI.Xaml.Controls.SplitViewDisplayMode value)
            {
                obj.DisplayMode = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(global::Windows.UI.Xaml.Controls.SplitView obj, global::System.Boolean value)
            {
                obj.IsPaneOpen = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_SplitView_CompactPaneLength(global::Windows.UI.Xaml.Controls.SplitView obj, global::System.Double value)
            {
                obj.CompactPaneLength = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_SplitView_OpenPaneLength(global::Windows.UI.Xaml.Controls.SplitView obj, global::System.Double value)
            {
                obj.OpenPaneLength = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentPresenter_Content(global::Windows.UI.Xaml.Controls.ContentPresenter obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_AdaptiveTrigger_MinWindowWidth(global::Windows.UI.Xaml.AdaptiveTrigger obj, global::System.Double value)
            {
                obj.MinWindowWidth = value;
            }
        };

        private class EnhancedNavigationShell_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IEnhancedNavigationShell_Bindings
        {
            private global::UwpEnhancedNavigation.EnhancedNavigationShell dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Grid obj2;
            private global::Windows.UI.Xaml.Controls.SplitView obj3;
            private global::Windows.UI.Xaml.Controls.Grid obj4;
            private global::Windows.UI.Xaml.Controls.ContentPresenter obj5;
            private global::Windows.UI.Xaml.Controls.Button obj6;
            private global::Windows.UI.Xaml.Shapes.Path obj7;
            private global::Windows.UI.Xaml.Controls.ContentPresenter obj8;
            private global::Windows.UI.Xaml.AdaptiveTrigger obj13;
            private global::Windows.UI.Xaml.AdaptiveTrigger obj14;
            private global::Windows.UI.Xaml.AdaptiveTrigger obj15;

            private EnhancedNavigationShell_obj1_BindingsTracking bindingsTracking;

            public EnhancedNavigationShell_obj1_Bindings()
            {
                this.bindingsTracking = new EnhancedNavigationShell_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.SplitView)target;
                        (this.obj3).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.SplitView.DisplayModeProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.DisplayMode = (this.obj3).DisplayMode;
                                }
                            });
                        (this.obj3).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.SplitView.IsPaneOpenProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ViewModel.IsPaneOpen = (this.obj3).IsPaneOpen;
                                }
                            });
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.ContentPresenter)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Shapes.Path)target;
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.ContentPresenter)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.AdaptiveTrigger)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.AdaptiveTrigger)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.AdaptiveTrigger)target;
                        break;
                    default:
                        break;
                }
            }

            // IEnhancedNavigationShell_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // EnhancedNavigationShell_obj1_Bindings

            public void SetDataRoot(global::UwpEnhancedNavigation.EnhancedNavigationShell newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UwpEnhancedNavigation.EnhancedNavigationShell obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ShellBackground(obj.ShellBackground, phase);
                        this.Update_ShellForeground(obj.ShellForeground, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_CompactPaneLength(obj.CompactPaneLength, phase);
                        this.Update_OpenPaneLength(obj.OpenPaneLength, phase);
                        this.Update_PainContent(obj.PainContent, phase);
                        this.Update_MainContent(obj.MainContent, phase);
                        this.Update_SmallMinWindowWidth(obj.SmallMinWindowWidth, phase);
                        this.Update_MediumMinWindowWidth(obj.MediumMinWindowWidth, phase);
                        this.Update_LargeMinWindowWidth(obj.LargeMinWindowWidth, phase);
                    }
                }
            }
            private void Update_ShellBackground(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Panel_Background(this.obj2, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Background(this.obj3, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Background(this.obj6, obj, null);
                }
            }
            private void Update_ShellForeground(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Foreground(this.obj3, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Foreground(this.obj6, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill(this.obj7, obj, null);
                }
            }
            private void Update_ViewModel(global::UwpEnhancedNavigation.ShellViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DisplayMode(obj.DisplayMode, phase);
                        this.Update_ViewModel_IsPaneOpen(obj.IsPaneOpen, phase);
                        this.Update_ViewModel_DisableContent(obj.DisableContent, phase);
                    }
                }
            }
            private void Update_ViewModel_DisplayMode(global::Windows.UI.Xaml.Controls.SplitViewDisplayMode obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SplitView_DisplayMode(this.obj3, obj);
                }
            }
            private void Update_ViewModel_IsPaneOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(this.obj3, obj);
                }
            }
            private void Update_CompactPaneLength(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SplitView_CompactPaneLength(this.obj3, obj);
                }
            }
            private void Update_OpenPaneLength(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SplitView_OpenPaneLength(this.obj3, obj);
                }
            }
            private void Update_ViewModel_DisableContent(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BooleanToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PainContent(global::System.Object obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentPresenter_Content(this.obj5, obj, null);
                }
            }
            private void Update_MainContent(global::System.Object obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentPresenter_Content(this.obj8, obj, null);
                }
            }
            private void Update_SmallMinWindowWidth(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_AdaptiveTrigger_MinWindowWidth(this.obj13, obj);
                }
            }
            private void Update_MediumMinWindowWidth(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_AdaptiveTrigger_MinWindowWidth(this.obj14, obj);
                }
            }
            private void Update_LargeMinWindowWidth(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_AdaptiveTrigger_MinWindowWidth(this.obj15, obj);
                }
            }

            private class EnhancedNavigationShell_obj1_BindingsTracking
            {
                global::System.WeakReference<EnhancedNavigationShell_obj1_Bindings> WeakRefToBindingObj; 

                public EnhancedNavigationShell_obj1_BindingsTracking(EnhancedNavigationShell_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<EnhancedNavigationShell_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    EnhancedNavigationShell_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UwpEnhancedNavigation.EnhancedNavigationShell obj = sender as global::UwpEnhancedNavigation.EnhancedNavigationShell;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ViewModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel(obj.ViewModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::UwpEnhancedNavigation.EnhancedNavigationShell obj)
                {
                    EnhancedNavigationShell_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    EnhancedNavigationShell_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::UwpEnhancedNavigation.ShellViewModel obj = sender as global::UwpEnhancedNavigation.ShellViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_DisplayMode(obj.DisplayMode, DATA_CHANGED);
                                    bindings.Update_ViewModel_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                                    bindings.Update_ViewModel_DisableContent(obj.DisableContent, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "DisplayMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DisplayMode(obj.DisplayMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaneOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DisableContent":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DisableContent(obj.DisableContent, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::UwpEnhancedNavigation.ShellViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::UwpEnhancedNavigation.ShellViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.MainSplitViewGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3:
                {
                    this.ShellSplitView = (global::Windows.UI.Xaml.Controls.SplitView)(target);
                }
                break;
            case 4:
                {
                    this.DisableContent = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 6:
                {
                    this.HamburgerButton = (global::Windows.UI.Xaml.Controls.Button)(target);
                    #line 38 "..\..\..\Views\EnhancedNavigationShell.xaml"
                    ((global::Windows.UI.Xaml.Controls.Button)this.HamburgerButton).Click += this.HamburgerButton_Click;
                    #line default
                }
                break;
            case 9:
                {
                    this.WidthVisualStates = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                    #line 63 "..\..\..\Views\EnhancedNavigationShell.xaml"
                    ((global::Windows.UI.Xaml.VisualStateGroup)this.WidthVisualStates).CurrentStateChanged += this.VisualStateChange_Event;
                    #line default
                }
                break;
            case 10:
                {
                    this.LARGE = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 11:
                {
                    this.MEDIUM = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 12:
                {
                    this.SMALL = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    EnhancedNavigationShell_obj1_Bindings bindings = new EnhancedNavigationShell_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

